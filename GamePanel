package engine;

import world.Level;

import javax.swing.*;
import java.awt.*;
import java.awt.image.BufferStrategy;

public class GamePanel extends Canvas implements Runnable {
    private Thread gameThread;
    private volatile boolean running;
    private final int width, height;
    private final int targetFps = 60;
    private final Level level;
    private final Input input;

    public GamePanel(int width, int height) {
        this.width = width; this.height = height;
        setPreferredSize(new Dimension(width, height));
        setBackground(Color.black);
        setIgnoreRepaint(true);
        input = new Input();
        addKeyListener(input);
        setFocusable(true);
        requestFocusInWindow();
        level = new Level(width, height);
    }

    public void start() {
        if (running) return;
        running = true;
        gameThread = new Thread(this, "GameLoop");
        gameThread.start();
    }

    public void stop() { running = false; }

    @Override
    public void run() {
        createBufferStrategy(2);
        BufferStrategy bs = getBufferStrategy();
        long nanosPerUpdate = 1_000_000_000L / targetFps;
        long last = System.nanoTime();
        double delta = 0;
        while (running) {
            long now = System.nanoTime();
            delta += (now - last) / (double) nanosPerUpdate;
            last = now;
            while (delta >= 1) {
                tick();
                delta -= 1;
            }
            render(bs);
            try { Thread.sleep(1); } catch (InterruptedException ignored) {}
        }
    }

    private void tick() { level.update(input); }

    private void render(BufferStrategy bs) {
        do {
            do {
                Graphics2D g = (Graphics2D) bs.getDrawGraphics();
                g.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);
                g.setColor(Color.black);
                g.fillRect(0, 0, width, height);
                level.render(g);
                g.dispose();
            } while (bs.contentsRestored());
            bs.show();
        } while (bs.contentsLost());
    }
}
